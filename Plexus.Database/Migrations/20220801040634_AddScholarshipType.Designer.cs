// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plexus.Database;

#nullable disable

namespace Plexus.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220801040634_AddScholarshipType")]
    partial class AddScholarshipType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AcademicLevels");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LectureCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OtherCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentAcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentAcademicSpecializationId");

                    b.ToTable("AcademicSpecializations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Corequisite", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorequisiteCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId", "CorequisiteCourseId");

                    b.HasIndex("CorequisiteCourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Corequisites");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourse", b =>
                {
                    b.Property<Guid>("CourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequiredCourse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequiredGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseGroupId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequiredGradeId");

                    b.ToTable("CurriculumCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseBlackList", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourseBlackLists");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("ParentCourseGroupId");

                    b.ToTable("CurriculumCourseGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroupIgnoreCourse", b =>
                {
                    b.Property<Guid>("CourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseGroupId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourseGroupIgnoreCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeCalendarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurriculumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequiredGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("CurriculumVersions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersionSpecialization", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "AcademicSpecializationId");

                    b.HasIndex("AcademicSpecializationId");

                    b.ToTable("CurriculumVersionSpecializations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.EquivalentCourse", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquivalenceCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId", "EquivalenceCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EquivalenceCourseId");

                    b.ToTable("EquivalentCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.SpecializationCourse", b =>
                {
                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequiredCourse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequiredGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcademicSpecializationId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequiredGradeId");

                    b.ToTable("SpecializationCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId", "Code")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculateAccumulateCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalculateGPA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalculateRegistrationCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowTranscript")
                        .HasColumnType("bit");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Letter")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSeat")
                        .HasColumnType("int");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalWeeks")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ParentSectionId");

                    b.HasIndex("TermId", "CourseId", "Number")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionDetails");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionExaminations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentTerm", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GPAX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPayable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistrable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "TermId");

                    b.HasIndex("TermId");

                    b.ToTable("StudentTerms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudyCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GradePublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GradeWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationChannel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("StudyCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Term", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CollegeCalendarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegister")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId", "Year", "Number")
                        .IsUnique();

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.BuildingAvailableTime", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("BuildingId", "Day");

                    b.ToTable("BuildingAvailableTimes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExaminationCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicLevelLocalization", b =>
                {
                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicLevelId", "Language");

                    b.ToTable("AcademicLevels", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.AcademicSpecializationLocalization", b =>
                {
                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicSpecializationId", "Language");

                    b.ToTable("AcademicSpecializations", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumCourseGroupLocalization", b =>
                {
                    b.Property<Guid>("CurriculumCourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumCourseGroupId", "Language");

                    b.ToTable("CurriculumCourseGroups", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumLocalization", b =>
                {
                    b.Property<Guid>("CurriculumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumId", "Language");

                    b.ToTable("Curriculums", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumVersionLocalization", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumVersionId", "Language");

                    b.ToTable("CurriculumVersions", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.DepartmentLocalization", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId", "Language");

                    b.ToTable("Departments", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.FacultyLocalization", b =>
                {
                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyId", "Language");

                    b.ToTable("Faculties", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.CourseLocalization", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId", "Language");

                    b.ToTable("Courses", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.BuildingLocalization", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId", "Language");

                    b.ToTable("Buildings", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.CampusLocalization", b =>
                {
                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId", "Language");

                    b.ToTable("Campuses", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.RoomLocalization", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId", "Language");

                    b.ToTable("Rooms", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.FeeTypeLocalization", b =>
                {
                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeTypeId", "Language");

                    b.ToTable("FeeTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentLocalization", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "Language");

                    b.ToTable("Students", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RateIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("RateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("RateTypeId");

                    b.ToTable("CourseFees");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeeTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.RateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RateTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScholarshipTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermFeeGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeGroupItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RecurringType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TermFeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("TermFeeGroupId");

                    b.ToTable("TermFeeGroupItems");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TuitionRates");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRateIndex", b =>
                {
                    b.Property<Guid>("TuitionRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TuitionRateId", "Index");

                    b.ToTable("TuitionRateIndexs");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRateIndexTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("TuitionRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TuitionRateId");

                    b.ToTable("TuitionRateIndexTransactions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TermId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<string>("BirthCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CardExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentContactAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainAddress")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddresses");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentGuardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmergencyContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainContact")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGuardians");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.Navigation("AcademicLevel");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "ParentAcademicSpecialization")
                        .WithMany()
                        .HasForeignKey("ParentAcademicSpecializationId");

                    b.Navigation("ParentAcademicSpecialization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Corequisite", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "CorequisiteCourse")
                        .WithMany()
                        .HasForeignKey("CorequisiteCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorequisiteCourse");

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CourseGroup")
                        .WithMany("CurriculumCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "RequiredGrade")
                        .WithMany()
                        .HasForeignKey("RequiredGradeId");

                    b.Navigation("Course");

                    b.Navigation("CourseGroup");

                    b.Navigation("RequiredGrade");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseBlackList", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "ParentCourseGroup")
                        .WithMany()
                        .HasForeignKey("ParentCourseGroupId");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("ParentCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroupIgnoreCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CurriculumCourseGroup")
                        .WithMany("CourseGroupIgnoreCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.Curriculum", "Curriculum")
                        .WithMany("Versions")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersionSpecialization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany()
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicSpecialization");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.EquivalentCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Equivalence")
                        .WithMany()
                        .HasForeignKey("EquivalenceCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("Equivalence");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.SpecializationCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany("SpecializationCourses")
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "RequiredGrade")
                        .WithMany()
                        .HasForeignKey("RequiredGradeId");

                    b.Navigation("AcademicSpecialization");

                    b.Navigation("Course");

                    b.Navigation("RequiredGrade");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.Section", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "ParentSection")
                        .WithMany()
                        .HasForeignKey("ParentSectionId");

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ParentSection");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionDetail", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionExamination", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentTerm", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudyCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Section");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Term", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.BuildingAvailableTime", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany("AvailableTimes")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicLevelLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.AcademicSpecializationLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicSpecialization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumCourseGroupLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CurriculumCourseGroup")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumCourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.Curriculum", "Curriculum")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumVersionLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.DepartmentLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany("Localizations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.FacultyLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany("Localizations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.CourseLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.BuildingLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany("Localizations")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.CampusLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Campus", "Campus")
                        .WithMany("Localizations")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.RoomLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany("Localizations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.FeeTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeType", "FeeType")
                        .WithMany("Localizations")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Localizations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseFee", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.FeeType", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FeeType");

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeGroupItem", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeType", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.TermFeeGroup", "TermFeeGroup")
                        .WithMany("Items")
                        .HasForeignKey("TermFeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeType");

                    b.Navigation("TermFeeGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRateIndex", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.TuitionRate", "TuitionRate")
                        .WithMany("Indexs")
                        .HasForeignKey("TuitionRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TuitionRate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRateIndexTransaction", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.TuitionRate", "TuitionRate")
                        .WithMany()
                        .HasForeignKey("TuitionRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TuitionRate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Slot", b =>
                {
                    b.HasOne("Plexus.Database.Model.Registration.Period", "Period")
                        .WithMany("Slots")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentContactAddress", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("ContactAddresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentGuardian", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Guardians")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicLevel", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("SpecializationCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.Navigation("CourseGroupIgnoreCourses");

                    b.Navigation("CurriculumCourses");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Faculty", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.Navigation("AvailableTimes");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Campus", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeGroup", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TuitionRate", b =>
                {
                    b.Navigation("Indexs");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.Navigation("ContactAddresses");

                    b.Navigation("Guardians");

                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
