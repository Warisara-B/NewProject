// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plexus.Database;

#nullable disable

namespace Plexus.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240207090405_FixStudentLocalizations")]
    partial class FixStudentLocalizations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AcademicLevels");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicPositions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AcademicPrograms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CareerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CareerPositions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GradeTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Hour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LectureHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MigrateReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OtherHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TeachingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TranscriptName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("GradeTemplateId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LectureHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MigrateReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OtherHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTopics");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("CourseTracks");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTrackDetail", b =>
                {
                    b.Property<Guid>("CourseTrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("CourseTrackId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTrackDetails");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentAcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentAcademicSpecializationId");

                    b.HasIndex("StudentId");

                    b.ToTable("AcademicSpecializations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Corequisite", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorequisiteCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId", "CorequisiteCourseId");

                    b.HasIndex("CorequisiteCourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Corequisites");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourse", b =>
                {
                    b.Property<Guid>("CourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequiredGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseGroupId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequiredGradeId");

                    b.ToTable("CurriculumCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseBlackList", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourseBlackLists");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MigrationReference")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RequiredCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("ParentCourseGroupId");

                    b.ToTable("CurriculumCourseGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroupIgnoreCourse", b =>
                {
                    b.Property<Guid>("CourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseGroupId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CurriculumCourseGroupIgnoreCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeCalendarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurriculumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DegreeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndBatchCode")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpectedGraduatingCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartBatchCode")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.ToTable("CurriculumVersions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersionSpecialization", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "AcademicSpecializationId");

                    b.HasIndex("AcademicSpecializationId");

                    b.ToTable("CurriculumVersionSpecializations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.EquivalentCourse", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquivalenceCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CurriculumVersionId", "CourseId", "EquivalenceCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EquivalenceCourseId");

                    b.ToTable("EquivalentCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.SpecializationCourse", b =>
                {
                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequiredCourse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequiredGradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcademicSpecializationId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequiredGradeId");

                    b.ToTable("SpecializationCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId", "Code")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculateAccumulateCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalculateGPA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalculateRegistrationCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowTranscript")
                        .HasColumnType("bit");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Letter")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.GradeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudyCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToGrade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("GradeLogs");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.GradeTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("GradeTemplates");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.GradeTemplateDetail", b =>
                {
                    b.Property<Guid>("GradeTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GradeTemplateId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeTemplateDetails");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.ExclusionCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("ExclusionConditions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSeat")
                        .HasColumnType("int");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGhostSection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutboundSection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithdrawable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MainInstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinimumSeat")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlanningSeat")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalWeeks")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MainInstructorId");

                    b.HasIndex("ParentSectionId");

                    b.HasIndex("TermId", "CourseId", "Number")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("TeachingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TeachingTypeId");

                    b.ToTable("SectionDetails");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionExamination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionExaminations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionSeatUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferenceSeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudyCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceSeatId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("SectionSeatUsages");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.SectionSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MasterSeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatUsed")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalSeat")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterSeatId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionSeats");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentCourseTrack", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseTrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "CourseTrackId");

                    b.HasIndex("CourseTrackId");

                    b.ToTable("StudentCourseTracks");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentTerm", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GPAX")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPayable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistrable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "TermId");

                    b.HasIndex("TermId");

                    b.ToTable("StudentTerms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudyCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GradePublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GradeWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationChannel")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("RegistrationCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectionSeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SectionSeatId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("StudyCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.TeachingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeachingTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Term", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CollegeCalendarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdvising")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurveyed")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalWeeks")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId", "Year", "Number")
                        .IsUnique();

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.WithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudyCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("WithdrawalRequests");
                });

            modelBuilder.Entity("Plexus.Database.Model.AudienceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AudienceGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Deformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Deformations");
                });

            modelBuilder.Entity("Plexus.Database.Model.EmployeeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.BuildingAvailableTime", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("BuildingId", "Day");

                    b.ToTable("BuildingAvailableTimes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Reservation.RoomReserveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndedAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepeatedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("StartedAt")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReserveRequests");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Reservation.RoomReserveSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomReserveRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomReserveRequestId");

                    b.ToTable("RoomReserveSlots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExaminationCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReservable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.RoomFacility", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("RoomId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Plexus.Database.Model.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorAcademicLevel", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId", "AcademicLevelId");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("InstructorAcademicLevels");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorAddress", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId");

                    b.ToTable("InstructorAddresses");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InstructorTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorWorkStatus", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfficeRoom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeGroupId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("TypeId");

                    b.ToTable("InstructorWorkStatuses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicLevelLocalization", b =>
                {
                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicLevelId", "Language");

                    b.ToTable("AcademicLevels", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicPositionLocalization", b =>
                {
                    b.Property<Guid>("AcademicPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicPositionId", "Language");

                    b.ToTable("AcademicPositions", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicProgramLocalization", b =>
                {
                    b.Property<Guid>("AcademicProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicProgramId", "Language");

                    b.ToTable("AcademicPrograms", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CareerPositionLocalization", b =>
                {
                    b.Property<Guid>("CareerPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareerPositionId", "Language");

                    b.ToTable("CareerPositions", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseLocalization", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranscriptName3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId", "Language");

                    b.ToTable("Courses", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseTopicLocalization", b =>
                {
                    b.Property<Guid>("CourseTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTopicId", "Language");

                    b.ToTable("CourseTopics", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseTrackLocalization", b =>
                {
                    b.Property<Guid>("CourseTrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseTrackId", "Language");

                    b.ToTable("CourseTracks", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.AcademicSpecializationLocalization", b =>
                {
                    b.Property<Guid>("AcademicSpecializationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicSpecializationId", "Language");

                    b.ToTable("AcademicSpecializations", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumCourseGroupLocalization", b =>
                {
                    b.Property<Guid>("CurriculumCourseGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumCourseGroupId", "Language");

                    b.ToTable("CurriculumCourseGroups", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumLocalization", b =>
                {
                    b.Property<Guid>("CurriculumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumId", "Language");

                    b.ToTable("Curriculums", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumVersionLocalization", b =>
                {
                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurriculumVersionId", "Language");

                    b.ToTable("CurriculumVersions", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.DepartmentLocalization", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId", "Language");

                    b.ToTable("Departments", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.FacultyLocalization", b =>
                {
                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyId", "Language");

                    b.ToTable("Faculties", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.TeachingTypeLocalization", b =>
                {
                    b.Property<Guid>("TeachingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeachingTypeId", "Language");

                    b.ToTable("TeachingTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.EmployeeGroupLocalization", b =>
                {
                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeGroupId", "Language");

                    b.ToTable("EmployeeGroups", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.BuildingLocalization", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId", "Language");

                    b.ToTable("Buildings", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.CampusLocalization", b =>
                {
                    b.Property<Guid>("CampusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId", "Language");

                    b.ToTable("Campuses", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.FacilityLocalization", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilityId", "Language");

                    b.ToTable("Facilities", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.RoomLocalization", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId", "Language");

                    b.ToTable("Rooms", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.InstructorLocalization", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId", "Language");

                    b.ToTable("Instructors", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.InstructorTypeLocalization", b =>
                {
                    b.Property<Guid>("InstructorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorTypeId", "Language");

                    b.ToTable("InstructorTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.FeeItemLocalization", b =>
                {
                    b.Property<Guid>("FeeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeItemId", "Language");

                    b.ToTable("FeeItems", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.RateTypeLocalization", b =>
                {
                    b.Property<Guid>("RateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RateTypeId", "Language");

                    b.ToTable("RateTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.StudentFeeTypeLocalization", b =>
                {
                    b.Property<Guid>("StudentFeeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentFeeTypeId", "Language");

                    b.ToTable("StudentFeeTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.TermFeePackageLocalization", b =>
                {
                    b.Property<Guid>("TermFeePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermFeePackageId", "Language");

                    b.ToTable("TermFeePackages", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ArticleTypeLocalization", b =>
                {
                    b.Property<Guid>("ArticleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleTypeId", "Language");

                    b.ToTable("ArticleTypes", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchCategoryLocalization", b =>
                {
                    b.Property<Guid>("ResearchCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResearchCategoryId", "Language");

                    b.ToTable("ResearchCategory", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchProcessLocalization", b =>
                {
                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessId", "Language");

                    b.ToTable("ResearchProcesses", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchTemplateLocalization", b =>
                {
                    b.Property<Guid>("ResearchTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResearchTemplateId", "Language");

                    b.ToTable("ResearchTemplates", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchTemplateSequenceLocalization", b =>
                {
                    b.Property<Guid>("SequenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SequenceId", "Language");

                    b.ToTable("ResearchTemplateSequences", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentGuardianLocalization", b =>
                {
                    b.Property<Guid>("StudentGuardianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentGuardianId", "Language");

                    b.ToTable("StudentGuardianLocalizations", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentLocalization", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "Language");

                    b.ToTable("Students", "localization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Passport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CalculationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RateIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("RateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FeeItemId");

                    b.HasIndex("RateTypeId");

                    b.ToTable("CourseFees");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseRates");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRateIndex", b =>
                {
                    b.Property<Guid>("CourseRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CalculationType")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseRateId", "RateTypeId", "Index");

                    b.HasIndex("RateTypeId");

                    b.ToTable("CourseRateIndexes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRateIndexTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CalculationType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CourseRateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("RateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseRateId");

                    b.HasIndex("RateTypeId");

                    b.ToTable("CourseRateIndexTransactions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeeGroups");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeGroupId");

                    b.ToTable("FeeItems");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.RateType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RateTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.Scholarship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllCoverage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeatCourseApplied")
                        .HasColumnType("bit");

                    b.Property<decimal>("LimitBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinGPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScholarshipTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sponsor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScholarshipTypeId");

                    b.ToTable("Scholarships");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipFeeItem", b =>
                {
                    b.Property<Guid>("ScholarshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ScholarshipId", "FeeItemId");

                    b.HasIndex("FeeItemId");

                    b.ToTable("ScholarshipFeeItems");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipFeeItemTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ScholarshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeItemId");

                    b.HasIndex("ScholarshipId");

                    b.ToTable("ScholarshipFeeItemTransactions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipReserveBudget", b =>
                {
                    b.Property<Guid>("ScholarshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ScholarshipId", "Name");

                    b.ToTable("ScholarshipReserveBudgets");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScholarshipTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndTerm")
                        .HasColumnType("int");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendContract")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScholarShipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartTerm")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<decimal>("StartedLimitBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScholarShipId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentScholarships");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarshipReserveBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentScholarshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentScholarshipId");

                    b.ToTable("StudentScholarshipReserveBudgets");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarshipUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReserveBudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentScholarshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Term")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReserveBudgetId");

                    b.HasIndex("StudentScholarshipId");

                    b.ToTable("StudentScholarshipUsages");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.StudentBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentBankAccounts");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.StudentFeeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentFeeTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RecurringType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TermFeePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TermType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeItemId");

                    b.HasIndex("TermFeePackageId");

                    b.ToTable("TermFeeItems");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermFeePackages");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.CoursePrerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.CurriculumCoursePrerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumVersionId");

                    b.ToTable("CurriculumCoursePrerequisites");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TermId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.RegistrationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationChannel")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.ToTable("RegistrationLogs");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.RegistrationLogCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RegistrationLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudyCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationLogId");

                    b.HasIndex("StudyCourseId");

                    b.ToTable("RegistrationLogCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialSlot")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.SlotCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotConditions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ArticleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArticleTypes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitationDOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitationPages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTypeId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchCategories");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchCommittee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ResearchProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ResearchProcessId");

                    b.ToTable("ResearchCommittees");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResearchId");

                    b.HasIndex("StudentId");

                    b.ToTable("ResearchMembers");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefenseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasCommitteeConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationDay")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResearchTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchTemplateId");

                    b.ToTable("ResearchProcesses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResearchTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedTermId");

                    b.HasIndex("ResearchTemplateId");

                    b.HasIndex("StartTermId");

                    b.ToTable("ResearchProfiles");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResearchProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResearchProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchProcessId");

                    b.HasIndex("ResearchProfileId");

                    b.ToTable("ResearchResources");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResearchTemplates");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchTemplateSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResearchTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResearchTemplateId");

                    b.ToTable("ResearchTemplateSequences");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BankAccountUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<string>("BirthCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompletedCredit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CurriculumVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegistrationCredit")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentFeeTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StudentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StudentStatusEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentStatusRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransferredCredit")
                        .HasColumnType("int");

                    b.Property<string>("UniversityEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicProgramId");

                    b.HasIndex("CurriculumVersionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("StudentFeeTypeId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Road")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddresses");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentGuardian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmergencyContact")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainContact")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGuardians");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("Plexus.Database.Model.Academic.GradeTemplate", "GradeTemplate")
                        .WithMany()
                        .HasForeignKey("GradeTemplateId");

                    b.HasOne("Plexus.Database.Model.Academic.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId");

                    b.Navigation("AcademicLevel");

                    b.Navigation("Faculty");

                    b.Navigation("GradeTemplate");

                    b.Navigation("TeachingType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTopic", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTrack", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", null)
                        .WithMany("CourseTracks")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTrackDetail", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.CourseTrack", "CourseTrack")
                        .WithMany()
                        .HasForeignKey("CourseTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseTrack");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "ParentAcademicSpecialization")
                        .WithMany()
                        .HasForeignKey("ParentAcademicSpecializationId");

                    b.HasOne("Plexus.Database.Model.Student", null)
                        .WithMany("AcademicSpecializations")
                        .HasForeignKey("StudentId");

                    b.Navigation("ParentAcademicSpecialization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Corequisite", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "CorequisiteCourse")
                        .WithMany()
                        .HasForeignKey("CorequisiteCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorequisiteCourse");

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CourseGroup")
                        .WithMany("CurriculumCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "RequiredGrade")
                        .WithMany()
                        .HasForeignKey("RequiredGradeId");

                    b.Navigation("Course");

                    b.Navigation("CourseGroup");

                    b.Navigation("RequiredGrade");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseBlackList", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "ParentCourseGroup")
                        .WithMany()
                        .HasForeignKey("ParentCourseGroupId");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("ParentCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroupIgnoreCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CurriculumCourseGroup")
                        .WithMany("CourseGroupIgnoreCourses")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.Curriculum", "Curriculum")
                        .WithMany("Versions")
                        .HasForeignKey("CurriculumId");

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicProgram");

                    b.Navigation("Curriculum");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersionSpecialization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany()
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicSpecialization");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.EquivalentCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Equivalence")
                        .WithMany()
                        .HasForeignKey("EquivalenceCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("Equivalence");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.SpecializationCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany("SpecializationCourses")
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "RequiredGrade")
                        .WithMany()
                        .HasForeignKey("RequiredGradeId");

                    b.Navigation("AcademicSpecialization");

                    b.Navigation("Course");

                    b.Navigation("RequiredGrade");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.GradeLog", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.StudyCourse", "StudyCourse")
                        .WithMany()
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.GradeTemplateDetail", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.GradeTemplate", "GradeTemplate")
                        .WithMany()
                        .HasForeignKey("GradeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("GradeTemplate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.ExclusionCondition", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.Section", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Instructor", "MainInstructor")
                        .WithMany()
                        .HasForeignKey("MainInstructorId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "ParentSection")
                        .WithMany("JointSections")
                        .HasForeignKey("ParentSectionId");

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("MainInstructor");

                    b.Navigation("ParentSection");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionDetail", b =>
                {
                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.TeachingType", "TeachingType")
                        .WithMany()
                        .HasForeignKey("TeachingTypeId");

                    b.Navigation("Instructor");

                    b.Navigation("Room");

                    b.Navigation("Section");

                    b.Navigation("TeachingType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionExamination", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.SectionSeatUsage", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.SectionSeat", "ReferenceSeat")
                        .WithMany()
                        .HasForeignKey("ReferenceSeatId");

                    b.HasOne("Plexus.Database.Model.Academic.SectionSeat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("Plexus.Database.Model.Academic.StudyCourse", "StudyCourse")
                        .WithMany()
                        .HasForeignKey("StudyCourseId");

                    b.Navigation("ReferenceSeat");

                    b.Navigation("Seat");

                    b.Navigation("Section");

                    b.Navigation("Student");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.SectionSeat", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.SectionSeat", "MasterSeat")
                        .WithMany()
                        .HasForeignKey("MasterSeatId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterSeat");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentCourseTrack", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.CourseTrack", "CourseTrack")
                        .WithMany()
                        .HasForeignKey("CourseTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTrack");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudentTerm", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Terms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.StudyCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("Plexus.Database.Model.Academic.Section.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("Plexus.Database.Model.Academic.SectionSeat", "SectionSeat")
                        .WithMany()
                        .HasForeignKey("SectionSeatId");

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("Section");

                    b.Navigation("SectionSeat");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Term", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.WithdrawalRequest", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.StudyCourse", "StudyCourse")
                        .WithMany()
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("Plexus.Database.Model.Deformation", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Deformations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.BuildingAvailableTime", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany("AvailableTimes")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Reservation.RoomReserveRequest", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Reservation.RoomReserveSlot", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Facility.Reservation.RoomReserveRequest", "RoomReserveRequest")
                        .WithMany("Slots")
                        .HasForeignKey("RoomReserveRequestId");

                    b.Navigation("Room");

                    b.Navigation("RoomReserveRequest");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.RoomFacility", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany("Facilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorAcademicLevel", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithMany("AcademicLevels")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorAddress", b =>
                {
                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithOne("Address")
                        .HasForeignKey("Plexus.Database.Model.InstructorAddress", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorWorkStatus", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.EmployeeGroup", "EmployeeGroup")
                        .WithMany()
                        .HasForeignKey("EmployeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithOne("Status")
                        .HasForeignKey("Plexus.Database.Model.InstructorWorkStatus", "InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.InstructorType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeGroup");

                    b.Navigation("Faculty");

                    b.Navigation("Instructor");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicLevelLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicPositionLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicPosition", "AcademicPosition")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicPosition");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.AcademicProgramLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicProgram", "AcademicProgram")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicProgram");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CareerPositionLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.CareerPosition", "CareerPosition")
                        .WithMany("Localizations")
                        .HasForeignKey("CareerPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPosition");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseTopicLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.CourseTopic", "CourseTopic")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTopic");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.CourseTrackLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.CourseTrack", "CourseTrack")
                        .WithMany("Localizations")
                        .HasForeignKey("CourseTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTrack");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.AcademicSpecializationLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", "AcademicSpecialization")
                        .WithMany("Localizations")
                        .HasForeignKey("AcademicSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicSpecialization");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumCourseGroupLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", "CurriculumCourseGroup")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumCourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumCourseGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.Curriculum", "Curriculum")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Curriculum.CurriculumVersionLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany("Localizations")
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.DepartmentLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany("Localizations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.Faculty.FacultyLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany("Localizations")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Academic.TeachingTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.TeachingType", "TeachingType")
                        .WithMany("Localizations")
                        .HasForeignKey("TeachingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeachingType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.EmployeeGroupLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.EmployeeGroup", "EmployeeGroup")
                        .WithMany("Localizations")
                        .HasForeignKey("EmployeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.BuildingLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Building", "Building")
                        .WithMany("Localizations")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.CampusLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Campus", "Campus")
                        .WithMany("Localizations")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.FacilityLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Facility", "Facility")
                        .WithMany("Localizations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Facility.RoomLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Facility.Room", "Room")
                        .WithMany("Localizations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.InstructorLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithMany("Localizations")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.InstructorTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.InstructorType", "InstructorType")
                        .WithMany("Localizations")
                        .HasForeignKey("InstructorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstructorType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.FeeItemLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeItem", "FeeItem")
                        .WithMany("Localizations")
                        .HasForeignKey("FeeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeItem");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.RateTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.RateType", "RateType")
                        .WithMany("Localizations")
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.StudentFeeTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.StudentFeeType", "StudentFeeType")
                        .WithMany("Localizations")
                        .HasForeignKey("StudentFeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentFeeType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Payment.TermFeePackageLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.TermFeePackage", "TermFeePackage")
                        .WithMany("Localizations")
                        .HasForeignKey("TermFeePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermFeePackage");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ArticleTypeLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ArticleType", "ArticleType")
                        .WithMany("Localizations")
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchCategoryLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchCategory", "ResearchCategory")
                        .WithMany("Localizations")
                        .HasForeignKey("ResearchCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchCategory");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchProcessLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchProcess", "ResearchProcess")
                        .WithMany("Localizations")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchProcess");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchTemplateLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchTemplate", "ResearchTemplate")
                        .WithMany("Localizations")
                        .HasForeignKey("ResearchTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTemplate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.Research.ResearchTemplateSequenceLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchTemplateSequence", "ResearchTemplateSequence")
                        .WithMany("Localizations")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTemplateSequence");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentGuardianLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.StudentGuardian", "StudentGuardian")
                        .WithMany("Localizations")
                        .HasForeignKey("StudentGuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGuardian");
                });

            modelBuilder.Entity("Plexus.Database.Model.Localization.StudentLocalization", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Localizations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Passport", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Passports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseFee", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FeeItem");

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRateIndex", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.CourseRate", "CourseRate")
                        .WithMany("Indexes")
                        .HasForeignKey("CourseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseRate");

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRateIndexTransaction", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.CourseRate", "CourseRate")
                        .WithMany()
                        .HasForeignKey("CourseRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.RateType", "RateType")
                        .WithMany()
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseRate");

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeItem", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeGroup", "FeeGroup")
                        .WithMany("FeeItems")
                        .HasForeignKey("FeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeGroup");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.Scholarship", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.ScholarshipType", "ScholarshipType")
                        .WithMany()
                        .HasForeignKey("ScholarshipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScholarshipType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipFeeItem", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeItem");

                    b.Navigation("Scholarship");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipFeeItemTransaction", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeItem");

                    b.Navigation("Scholarship");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.ScholarshipReserveBudget", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scholarship");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarship", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scholarship");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarshipReserveBudget", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.StudentScholarship", "StudentScholarship")
                        .WithMany("ReserveBudgets")
                        .HasForeignKey("StudentScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentScholarship");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarshipUsage", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.StudentScholarshipReserveBudget", "ReserveBudget")
                        .WithMany()
                        .HasForeignKey("ReserveBudgetId");

                    b.HasOne("Plexus.Database.Model.Payment.Scholarship.StudentScholarship", "StudentScholarship")
                        .WithMany("Usages")
                        .HasForeignKey("StudentScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReserveBudget");

                    b.Navigation("StudentScholarship");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.StudentBankAccount", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeeItem", b =>
                {
                    b.HasOne("Plexus.Database.Model.Payment.FeeItem", "FeeItem")
                        .WithMany()
                        .HasForeignKey("FeeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.TermFeePackage", "TermFeePackage")
                        .WithMany("Items")
                        .HasForeignKey("TermFeePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeItem");

                    b.Navigation("TermFeePackage");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.CoursePrerequisite", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.CurriculumCoursePrerequisite", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurriculumVersion");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.RegistrationLog", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.RegistrationLogCourse", b =>
                {
                    b.HasOne("Plexus.Database.Model.Registration.RegistrationLog", "Log")
                        .WithMany()
                        .HasForeignKey("RegistrationLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.StudyCourse", "StudyCourse")
                        .WithMany()
                        .HasForeignKey("StudyCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");

                    b.Navigation("StudyCourse");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Slot", b =>
                {
                    b.HasOne("Plexus.Database.Model.Registration.Period", "Period")
                        .WithMany("Slots")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.SlotCondition", b =>
                {
                    b.HasOne("Plexus.Database.Model.Registration.Slot", "Slot")
                        .WithMany("SlotConditions")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.Publication", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ArticleType", "ArticleType")
                        .WithMany()
                        .HasForeignKey("ArticleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleType");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchCommittee", b =>
                {
                    b.HasOne("Plexus.Database.Model.Instructor", "Instructor")
                        .WithMany("ResearchCommittees")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Research.ResearchProcess", "Process")
                        .WithMany("Committees")
                        .HasForeignKey("ResearchProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchMember", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchProfile", "Research")
                        .WithMany("ResearchMembers")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Researches")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProcess", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchTemplate", "ResearchTemplate")
                        .WithMany()
                        .HasForeignKey("ResearchTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTemplate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProfile", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.Term", "CompletedTerm")
                        .WithMany()
                        .HasForeignKey("CompletedTermId");

                    b.HasOne("Plexus.Database.Model.Research.ResearchTemplate", "ResearchTemplate")
                        .WithMany()
                        .HasForeignKey("ResearchTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Term", "StartTerm")
                        .WithMany()
                        .HasForeignKey("StartTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedTerm");

                    b.Navigation("ResearchTemplate");

                    b.Navigation("StartTerm");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchResource", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchProcess", "Process")
                        .WithMany("Resources")
                        .HasForeignKey("ResearchProcessId");

                    b.HasOne("Plexus.Database.Model.Research.ResearchProfile", "Research")
                        .WithMany("Resources")
                        .HasForeignKey("ResearchProfileId");

                    b.Navigation("Process");

                    b.Navigation("Research");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchTemplateSequence", b =>
                {
                    b.HasOne("Plexus.Database.Model.Research.ResearchTemplate", "ResearchTemplate")
                        .WithMany("Sequences")
                        .HasForeignKey("ResearchTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchTemplate");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.HasOne("Plexus.Database.Model.Academic.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", "CurriculumVersion")
                        .WithMany()
                        .HasForeignKey("CurriculumVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Plexus.Database.Model.Academic.Faculty.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plexus.Database.Model.Payment.StudentFeeType", "StudentFeeType")
                        .WithMany()
                        .HasForeignKey("StudentFeeTypeId");

                    b.Navigation("AcademicLevel");

                    b.Navigation("AcademicProgram");

                    b.Navigation("CurriculumVersion");

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("StudentFeeType");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentAddress", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentGuardian", b =>
                {
                    b.HasOne("Plexus.Database.Model.Student", "Student")
                        .WithMany("Guardians")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicLevel", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicPosition", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.AcademicProgram", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CareerPosition", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Course", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTopic", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.CourseTrack", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.AcademicSpecialization", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("SpecializationCourses");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.Curriculum", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumCourseGroup", b =>
                {
                    b.Navigation("CourseGroupIgnoreCourses");

                    b.Navigation("CurriculumCourses");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Curriculum.CurriculumVersion", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Department", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Faculty.Faculty", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.Section.Section", b =>
                {
                    b.Navigation("JointSections");
                });

            modelBuilder.Entity("Plexus.Database.Model.Academic.TeachingType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.EmployeeGroup", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Building", b =>
                {
                    b.Navigation("AvailableTimes");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Campus", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Facility", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Reservation.RoomReserveRequest", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Facility.Room", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Instructor", b =>
                {
                    b.Navigation("AcademicLevels");

                    b.Navigation("Address");

                    b.Navigation("Localizations");

                    b.Navigation("ResearchCommittees");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Plexus.Database.Model.InstructorType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.CourseRate", b =>
                {
                    b.Navigation("Indexes");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeGroup", b =>
                {
                    b.Navigation("FeeItems");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.FeeItem", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.RateType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.Scholarship.StudentScholarship", b =>
                {
                    b.Navigation("ReserveBudgets");

                    b.Navigation("Usages");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.StudentFeeType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Payment.TermFeePackage", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Period", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Plexus.Database.Model.Registration.Slot", b =>
                {
                    b.Navigation("SlotConditions");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ArticleType", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchCategory", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProcess", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Localizations");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchProfile", b =>
                {
                    b.Navigation("ResearchMembers");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchTemplate", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Sequences");
                });

            modelBuilder.Entity("Plexus.Database.Model.Research.ResearchTemplateSequence", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Plexus.Database.Model.Student", b =>
                {
                    b.Navigation("AcademicSpecializations");

                    b.Navigation("Addresses");

                    b.Navigation("CourseTracks");

                    b.Navigation("Deformations");

                    b.Navigation("Guardians");

                    b.Navigation("Localizations");

                    b.Navigation("Passports");

                    b.Navigation("Researches");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Plexus.Database.Model.StudentGuardian", b =>
                {
                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
